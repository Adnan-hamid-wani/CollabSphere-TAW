generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id          String   @id @default(uuid())
  content     String?  // optional, in case it's just an image/doc
  type        MessageType @default(TEXT)

  fileUrl     String?   // for image/pdf/document
  fileName    String?   // original name
  fileType    String?   // MIME type: image/png, application/pdf, etc.

  createdAt   DateTime @default(now())
  
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])

  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  status      MessageStatus @default(SENT) // ðŸ‘ˆ new field

}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
}
enum MessageStatus {
  SENT
  DELIVERED
  READ
}



model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String
  password          String
  role              Role     @default(USER)
  createdAt         DateTime @default(now())

  resetToken        String?
  resetTokenExpiry  DateTime?

  createdTasks      Task[]   @relation("CreatedTasks")
  assignedTasks     Task[]   @relation("AssignedTasks")
  taskActivities    TaskActivity[] @relation("ActorActivities")
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
}


model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  status      String  @default("TODO")
  feedback    String?
  assignedTo  String
  createdBy   String
  priority    String  @default("MEDIUM") // <-- Add this line


  assignedUser User @relation("AssignedTasks", fields: [assignedTo], references: [id])
  creator      User @relation("CreatedTasks", fields: [createdBy], references: [id])

  createdAt          DateTime  @default(now())
  submittedForReview Boolean   @default(false)
  submittedAt        DateTime?
  approvedAt         DateTime?
  attachmentUrl String?     // <-- New: file path or S3 URL


  // ðŸ‘‡ Back-relation for TaskActivity (task)
  activities TaskActivity[] @relation("TaskActivities")
}

model TaskActivity {
  id        String   @id @default(uuid())
  taskId    String
  actorId   String
  action    String // e.g. "CREATED", "UPDATED", "COMPLETED"
  message   String // e.g. "Task X approved by Admin"
  createdAt DateTime @default(now())

  task  Task @relation("TaskActivities", fields: [taskId], references: [id], onDelete: Cascade)
  actor User @relation("ActorActivities", fields: [actorId], references: [id])
}

enum Role {
  ADMIN
  USER
}
